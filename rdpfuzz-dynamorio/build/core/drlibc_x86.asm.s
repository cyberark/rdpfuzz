












































































































































































































































































































































   

























































  



  

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
.CODE

EXTERN unexpected_return:PROC



























































































































































































































































































































        dr_fpu_exception_init PROC

        fninit
        push     01f80h
        ldmxcsr  dword ptr [rsp]
        pop      rax
        ret
        dr_fpu_exception_init ENDP






        get_mmx_val PROC FRAME

        mov      rax, rcx
        mov      rcx, rdx
        .endprolog
        cmp      ecx, 0
        je       get_mmx_0
        cmp      ecx, 1
        je       get_mmx_1
        cmp      ecx, 2
        je       get_mmx_2
        cmp      ecx, 3
        je       get_mmx_3
        cmp      ecx, 4
        je       get_mmx_4
        cmp      ecx, 5
        je       get_mmx_5
        cmp      ecx, 6
        je       get_mmx_6
        movq     qword ptr [rax], mm7
        jmp get_mmx_done
get_mmx_6:
        movq     qword ptr [rax], mm6
        jmp get_mmx_done
get_mmx_5:
        movq     qword ptr [rax], mm5
        jmp get_mmx_done
get_mmx_4:
        movq     qword ptr [rax], mm4
        jmp get_mmx_done
get_mmx_3:
        movq     qword ptr [rax], mm3
        jmp get_mmx_done
get_mmx_2:
        movq     qword ptr [rax], mm2
        jmp get_mmx_done
get_mmx_1:
        movq     qword ptr [rax], mm1
        jmp get_mmx_done
get_mmx_0:
        movq     qword ptr [rax], mm0
get_mmx_done:
        add      rsp, 0 
        ret
        get_mmx_val ENDP







        get_frame_ptr PROC

        mov      rax, rbp
        ret
        get_frame_ptr ENDP




        get_stack_ptr PROC

        mov      rax, rsp
        add      rax, 8 
        ret
        get_stack_ptr ENDP

































































































































































        load_dynamo PROC

    





























        
        mov      edi, edi
        








        mov      qword ptr [(((3*8)) + 3*8) + 4*8 + rsp], rcx


























        
        pop      rbx 
        
        pop      rax 
        sub      rsp, 16 - 8*2 
        lea rsp, [-32 - 8*0 + rsp] 
 mov rcx, rax 
 call rbx 
 lea rsp, [32 + 8*0 + rsp] 
        add      rsp, 16 - 8*2 

        
        cmp      rax, 0
        jne      load_dynamo_success
        pop      rbx 
        pop      rbx 
        jmp      load_dynamo_failure
load_dynamo_success:
        
        pop      rbx 
        
        
        pop      rdi 
        
        lea rsp, [-32 - 8*0 + rsp] 
 mov rdx, rdi 
 mov rcx, rax 
 call rbx 
 lea rsp, [32 + 8*0 + rsp] 
        cmp      rax, 0
        je       load_dynamo_failure

        
        jmp      rax
        


        load_dynamo ENDP











        load_dynamo_failure PROC

        



        mov      rax, [((3*8)) + rsp] 
        mov      rbx, [(17*8) + rsp] 
        
        mov      [-8 + rax], rbx
        


        pop rdi 
 pop rsi 
 pop rbp 
 pop rbx 
 pop rbx 
 pop rdx 
 pop rcx 
 pop rax 
 pop r8 
 pop r9 
 pop r10 
 pop r11 
 pop r12 
 pop r13 
 pop r14 
 pop r15 

        popfq
        
        
        
        mov      rsp, [-(17*8) + ((3*8)) + rsp]
        jmp      qword ptr [-8 + rsp]      

        ret
        load_dynamo_failure ENDP



END
